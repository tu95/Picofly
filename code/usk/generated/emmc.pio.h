// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// sd_clk //
// ------ //

#define sd_clk_wrap_target 0
#define sd_clk_wrap 3

static const uint16_t sd_clk_program_instructions[] = {
            //     .wrap_target
    0xf080, //  0: set    pindirs, 0      side 1     
    0xc040, //  1: irq    clear 0         side 0     
    0xf081, //  2: set    pindirs, 1      side 1     
    0xc040, //  3: irq    clear 0         side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sd_clk_program = {
    .instructions = sd_clk_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config sd_clk_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sd_clk_wrap_target, offset + sd_clk_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

// -------------- //
// out_cmd_or_dat //
// -------------- //

#define out_cmd_or_dat_wrap_target 0
#define out_cmd_or_dat_wrap 5

static const uint16_t out_cmd_or_dat_program_instructions[] = {
            //     .wrap_target
    0x6030, //  0: out    x, 16                      
    0xc120, //  1: irq    wait 0                 [1] 
    0x6081, //  2: out    pindirs, 1                 
    0x0042, //  3: jmp    x--, 2                     
    0xc041, //  4: irq    clear 1                    
    0x6060, //  5: out    null, 32                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program out_cmd_or_dat_program = {
    .instructions = out_cmd_or_dat_program_instructions,
    .length = 6,
    .origin = -1,
};

static inline pio_sm_config out_cmd_or_dat_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + out_cmd_or_dat_wrap_target, offset + out_cmd_or_dat_wrap);
    return c;
}
#endif

// ------------- //
// in_cmd_or_dat //
// ------------- //

#define in_cmd_or_dat_wrap_target 0
#define in_cmd_or_dat_wrap 6

static const uint16_t in_cmd_or_dat_program_instructions[] = {
            //     .wrap_target
    0x6020, //  0: out    x, 32                      
    0xc021, //  1: irq    wait 1                     
    0xc020, //  2: irq    wait 0                     
    0x01c3, //  3: jmp    pin, 3                 [1] 
    0x4001, //  4: in     pins, 1                    
    0x0044, //  5: jmp    x--, 4                     
    0x8020, //  6: push   block                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program in_cmd_or_dat_program = {
    .instructions = in_cmd_or_dat_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config in_cmd_or_dat_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + in_cmd_or_dat_wrap_target, offset + in_cmd_or_dat_wrap);
    return c;
}
#endif

// ---------------- //
// glitch_sniff_cmd //
// ---------------- //

#define glitch_sniff_cmd_wrap_target 0
#define glitch_sniff_cmd_wrap 14

static const uint16_t glitch_sniff_cmd_program_instructions[] = {
            //     .wrap_target
    0xa027, //  0: mov    x, osr                     
    0x203f, //  1: wait   0 pin, 31                  
    0x20bf, //  2: wait   1 pin, 31                  
    0x00c1, //  3: jmp    pin, 1                     
    0x203f, //  4: wait   0 pin, 31                  
    0x4061, //  5: in     null, 1                    
    0x20bf, //  6: wait   1 pin, 31                  
    0x4001, //  7: in     pins, 1                    
    0x203f, //  8: wait   0 pin, 31                  
    0x0046, //  9: jmp    x--, 6                     
    0xc042, // 10: irq    clear 2                    
    0xa026, // 11: mov    x, isr                     
    0x8020, // 12: push   block                      
    0x00a0, // 13: jmp    x != y, 0                  
    0xc040, // 14: irq    clear 0                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program glitch_sniff_cmd_program = {
    .instructions = glitch_sniff_cmd_program_instructions,
    .length = 15,
    .origin = -1,
};

static inline pio_sm_config glitch_sniff_cmd_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + glitch_sniff_cmd_wrap_target, offset + glitch_sniff_cmd_wrap);
    return c;
}
#endif

// ----------------- //
// glitch_dat_waiter //
// ----------------- //

#define glitch_dat_waiter_wrap_target 0
#define glitch_dat_waiter_wrap 8

static const uint16_t glitch_dat_waiter_program_instructions[] = {
            //     .wrap_target
    0xa022, //  0: mov    x, y                       
    0x203e, //  1: wait   0 pin, 30                  
    0x20be, //  2: wait   1 pin, 30                  
    0x00c1, //  3: jmp    pin, 1                     
    0x203e, //  4: wait   0 pin, 30                  
    0x20be, //  5: wait   1 pin, 30                  
    0x203e, //  6: wait   0 pin, 30                  
    0x0045, //  7: jmp    x--, 5                     
    0xc041, //  8: irq    clear 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program glitch_dat_waiter_program = {
    .instructions = glitch_dat_waiter_program_instructions,
    .length = 9,
    .origin = -1,
};

static inline pio_sm_config glitch_dat_waiter_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + glitch_dat_waiter_wrap_target, offset + glitch_dat_waiter_wrap);
    return c;
}
#endif

// -------------- //
// glitch_trigger //
// -------------- //

#define glitch_trigger_wrap_target 0
#define glitch_trigger_wrap 7

static const uint16_t glitch_trigger_program_instructions[] = {
            //     .wrap_target
    0x6020, //  0: out    x, 32           side 0     
    0x6040, //  1: out    y, 32           side 0     
    0xc020, //  2: irq    wait 0          side 0     
    0xc021, //  3: irq    wait 1          side 0     
    0xc022, //  4: irq    wait 2          side 0     
    0xc022, //  5: irq    wait 2          side 0     
    0x0046, //  6: jmp    x--, 6          side 0     
    0x1087, //  7: jmp    y--, 7          side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program glitch_trigger_program = {
    .instructions = glitch_trigger_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config glitch_trigger_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + glitch_trigger_wrap_target, offset + glitch_trigger_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

